[{"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\index.js":"1","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\App.js":"2","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\GlobalStyles.js":"3","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\home-page\\index.jsx":"4","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\poll-page\\index.jsx":"5","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\log-in-page\\index.jsx":"6","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\user-page\\index.jsx":"7","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\constant.js":"8","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\user-reducer.js":"9","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\action.js":"10","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\store.js":"11","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\index.js":"12","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\poll-reducer.js":"13"},{"size":431,"mtime":1612314588518,"results":"14","hashOfConfig":"15"},{"size":1304,"mtime":1612992176014,"results":"16","hashOfConfig":"15"},{"size":1727,"mtime":1613437854789,"results":"17","hashOfConfig":"15"},{"size":6289,"mtime":1613088400613,"results":"18","hashOfConfig":"15"},{"size":3142,"mtime":1613093529224,"results":"19","hashOfConfig":"15"},{"size":6615,"mtime":1613524217858,"results":"20","hashOfConfig":"15"},{"size":1964,"mtime":1613090423273,"results":"21","hashOfConfig":"15"},{"size":449,"mtime":1613001748706,"results":"22","hashOfConfig":"15"},{"size":726,"mtime":1612321768557,"results":"23","hashOfConfig":"15"},{"size":593,"mtime":1612316204270,"results":"24","hashOfConfig":"15"},{"size":303,"mtime":1612230258239,"results":"25","hashOfConfig":"15"},{"size":175,"mtime":1612230243143,"results":"26","hashOfConfig":"15"},{"size":791,"mtime":1612313875949,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ja0ftj",{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\index.js",[],["59","60"],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\App.js",["61","62","63","64","65"],"import React, { useContext, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  useHistory,\n} from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { requestUser, receiveUser, userError } from \"./reducer/action\";\n\nimport Home from \"./components/home-page\";\nimport Poll from \"./components/poll-page\";\nimport LogIn from \"./components/log-in-page\";\nimport User from \"./components/user-page\";\n\nfunction App() {\n  const userState = useSelector((state) => state.user);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser && !userState.user) {\n      const foundUser = JSON.parse(loggedInUser);\n      dispatch(receiveUser(foundUser));\n    } else if (userState.user) {\n      <Redirect to={'/'} />\n    }\n  }, [userState]);\n\n  return (\n    <Router>\n      {userState.user ? (\n        <>\n          <Route exact path={\"/\"}>\n            <Home />\n          </Route>\n          <Route path={\"/poll/:pollId\"}>\n            <Poll />\n          </Route>\n          <Route path={\"/user/:userId\"}>\n            <User />\n          </Route>\n        </>\n      ) : (\n        <Route exact path={\"/\"}>\n          <LogIn />\n        </Route>\n      )}\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\GlobalStyles.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\home-page\\index.jsx",["66","67","68","69","70","71"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport { SERVER_URL, initialData } from '../../constant';\r\nimport {\r\n  requestUser,\r\n  receiveUser,\r\n  userError,\r\n  userLogout,\r\n  receivePolls,\r\n  requestPolls,\r\n  pollError,\r\n  votePoll,\r\n} from \"../../reducer/action\";\r\nimport { COLOR } from '../../constant'\r\n\r\nfunction Home() {\r\n  const userState = useSelector(state => state.user)\r\n  const pollState = useSelector(state => state.poll)\r\n\r\n  const [pollCreation, setPollCreation] = useState(false);\r\n  const [pollName, setPollName] = useState('');\r\n  const [pollOptions, setPollOptions] = useState(initialData);\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    fetch(SERVER_URL + `/api/newpoll`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        pollName,\r\n        pollOptions,\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(poll => {\r\n        fetchAllPolls()\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n\r\n    setPollName('')\r\n    setPollOptions([\r\n      {\r\n        title: \"\",\r\n        value: 0,\r\n        color: '',\r\n        voters: [],\r\n      },\r\n      {\r\n        title: \"\",\r\n        value: 0,\r\n        color: '',\r\n        voters: [],\r\n      },\r\n    ])\r\n    setPollCreation(false)\r\n  }\r\n\r\n  const fetchAllPolls = () => {\r\n    dispatch(requestPolls());\r\n\r\n    fetch(SERVER_URL + `/api/getpolls`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        dispatch(receivePolls(data.polls))\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n  }\r\n\r\n  const addOption = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    const newData = {\r\n      title: \"\",\r\n      value: 0,\r\n      color: '',\r\n      voters: [],\r\n    }\r\n\r\n    const newOptions = [...pollOptions]\r\n\r\n    newOptions.push(newData)\r\n\r\n    setPollOptions(newOptions);\r\n  }\r\n\r\n  const removeOption = (ev, index) => {\r\n    ev.preventDefault();\r\n\r\n    const updatedOptions = pollOptions.filter((option, id) => id !== index);\r\n\r\n    setPollOptions(updatedOptions)\r\n  }\r\n\r\n  const updatePollName = (ev) => {\r\n    setPollName(ev.currentTarget.value)\r\n  }\r\n\r\n  const updateOptionName = (ev, index) => {\r\n    const updatedOptions = [...pollOptions]\r\n\r\n    updatedOptions[index].title = ev.currentTarget.value\r\n\r\n    setPollOptions(updatedOptions)\r\n  }\r\n\r\n  const handleVote = (ev, _id, title) => {\r\n    ev.preventDefault();\r\n\r\n    fetch(SERVER_URL + `/api/votepoll`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        user: userState.user,\r\n        title,\r\n        _id,\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(poll => {\r\n        fetchAllPolls()\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  const handleLogout = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(userLogout());\r\n\r\n    history.push('/')\r\n\r\n    localStorage.clear();\r\n  }\r\n\r\n  const handleColorChange = (pollData) => {\r\n    const colorOrder = [];\r\n\r\n    pollData.options.forEach(option => colorOrder.push({value: option.value, title: option.title}))\r\n\r\n    colorOrder.sort((a,b) => a.value > b.value ? 1: -1)\r\n\r\n    pollData.options.map((option, index) => {\r\n      const indexValue = colorOrder.findIndex(x => x.title === option.title)\r\n\r\n      option.color = COLOR.RED_GRADIENT[indexValue]\r\n\r\n      if (option.voters.find(voter => voter === userState.user.username)) {\r\n        option.color = COLOR.GREEN\r\n      }\r\n    })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (pollState.polls.length === 0) {\r\n      fetchAllPolls()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {userState && <div><Link to={`/user/${userState.user._id}`} >{userState.user.username}</Link><button onClick={handleLogout}>Leave</button></div>}\r\n      {pollCreation ? <form onSubmit={handleSubmit}>\r\n        <p onClick={() => setPollCreation(!pollCreation)}>Hide</p>\r\n        <label>\r\n          <input onChange={updatePollName} value={pollName} type={'text'} placeholder={'Poll Name'} required />\r\n        </label>\r\n        <div id={'option-input'}>\r\n\r\n          {\r\n            pollOptions.map((option, index) => {\r\n              return <>\r\n                <label>\r\n                  <input onChange={(ev) => updateOptionName(ev, index)} value={pollOptions[index].title} className={`option-${index}`} type={'text'} placeholder={'Option'} required />\r\n                  {(pollOptions.length > 2) && <button type={'button'} className={`option-${index}`} onClick={(ev) => removeOption(ev, index)} >-</button>}\r\n                </label>\r\n                {(index === pollOptions.length - 1 && pollOptions.length < 5) && <button type={'button'} onClick={(ev) => addOption(ev)} >+</button>}\r\n              </>\r\n            })\r\n          }\r\n\r\n        </div>\r\n        <button type={\"submit\"}>Submit Poll</button>\r\n      </form> : <div onClick={() => setPollCreation(!pollCreation)}>Create A Poll</div> }\r\n      \r\n      <div>\r\n        {\r\n          pollState.polls.map((poll, index) => {\r\n            handleColorChange(poll);\r\n            return <div key={index} style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', border: '1px solid red' }}>\r\n              <Link to={`/poll/${poll._id}`}>{poll.pollName}</Link>\r\n              <PieChart data={poll.options} style={{ width: '200px'}} onClick={(ev, index) => handleVote(ev, poll._id, poll.options[index].title)} startAngle={270} lineWidth={35} />\r\n\r\n              <ul>\r\n                {poll.options.map(option => {\r\n                  return <>\r\n                    <li onClick={(ev) => handleVote(ev, poll._id, option.title)} ><p style={{ background: `${option.color}`}}>{option.voters.length}</p> {option.title}</li>\r\n                  </>\r\n                })}\r\n              </ul>\r\n            </div>\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\poll-page\\index.jsx",["72","73","74","75","76","77","78"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport { SERVER_URL, initialData } from '../../constant';\r\nimport {\r\n  requestUser,\r\n  receiveUser,\r\n  userError,\r\n  userLogout,\r\n  receivePolls,\r\n  requestPolls,\r\n  pollError,\r\n  votePoll,\r\n} from \"../../reducer/action\";\r\nimport { COLOR } from '../../constant'\r\n\r\nfunction Poll() {\r\n  const userState = useSelector(state => state.user)\r\n  const pollState = useSelector(state => state.poll)\r\n\r\n  const { pollId } = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const currentPoll = pollState.polls.find(poll => poll._id === pollId);\r\n\r\n  const handleLogout = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(userLogout());\r\n\r\n    history.push('/')\r\n\r\n    localStorage.clear();\r\n  }\r\n\r\n  const handleVote = (ev, _id, title) => {\r\n    ev.preventDefault();\r\n\r\n    fetch(SERVER_URL + `/api/votepoll`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        user: userState.user,\r\n        title,\r\n        _id,\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(poll => {\r\n        fetchAllPolls()\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  const fetchAllPolls = () => {\r\n    dispatch(requestPolls());\r\n\r\n    fetch(SERVER_URL + `/api/getpolls`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        dispatch(receivePolls(data.polls))\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n  }\r\n\r\n  const handleColorChange = (pollData) => {\r\n    const colorOrder = [];\r\n\r\n    pollData.options.forEach(option => colorOrder.push({value: option.value, title: option.title}))\r\n\r\n    colorOrder.sort((a,b) => a.value > b.value ? 1: -1)\r\n\r\n    pollData.options.map((option, index) => {\r\n      const indexValue = colorOrder.findIndex(x => x.title === option.title)\r\n\r\n      option.color = COLOR.RED_GRADIENT[indexValue]\r\n\r\n      if (option.voters.find(voter => voter === userState.user.username)) {\r\n        option.color = COLOR.GREEN\r\n      }\r\n    })\r\n  }\r\n\r\n  handleColorChange(currentPoll)\r\n  return <>\r\n    <div>\r\n      <Link to={`/`}>Back To Voting</Link>\r\n      <Link to={`/user/${userState.user.username}`}>{userState.user.username}</Link>\r\n      {userState && <button onClick={handleLogout}>Leave</button>}\r\n    </div>\r\n    <div>\r\n      <PieChart data={currentPoll.options} style={{ width: '200px'}} onClick={(ev, index) => handleVote(ev, currentPoll._id, currentPoll.options[index].title)} startAngle={270} lineWidth={35} />\r\n      <ul>\r\n        {currentPoll.options.map(option => {\r\n          return (<>\r\n              <li onClick={(ev) => handleVote(ev, currentPoll._id, option.title)} ><p style={{ background: `${option.color}`}}>{option.voters.length}</p> {option.title}</li>\r\n            </>)\r\n        })}\r\n      </ul>\r\n    </div>\r\n  </>;\r\n}\r\n\r\nexport default Poll;\r\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\log-in-page\\index.jsx",["79"],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\user-page\\index.jsx",["80","81","82","83","84","85","86","87","88","89","90"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport { SERVER_URL, initialData } from '../../constant';\r\nimport {\r\n  requestUser,\r\n  receiveUser,\r\n  userError,\r\n  userLogout,\r\n  receivePolls,\r\n  requestPolls,\r\n  pollError,\r\n  votePoll,\r\n} from \"../../reducer/action\";\r\nimport { COLOR } from '../../constant'\r\n\r\nfunction User() {\r\n  const userState = useSelector((state) => state.user);\r\n  const pollState = useSelector((state) => state.poll);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const handleLogout = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(userLogout());\r\n\r\n    history.push('/')\r\n\r\n    localStorage.clear();\r\n  }\r\n  const fetchAllPolls = () => {\r\n    dispatch(requestPolls());\r\n\r\n    fetch(SERVER_URL + `/api/getpolls`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        dispatch(receivePolls(data.polls))\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (pollState.polls.length === 0) {\r\n      fetchAllPolls()\r\n    }\r\n  }, [])\r\n\r\nconsole.log(pollState.polls.length)\r\n  return (\r\n    <>\r\n      <div>\r\n        <Link to={`/`}>Back To Voting</Link>\r\n        {userState && <button onClick={handleLogout}>Leave</button>}\r\n      </div>\r\n      {userState.user.votes && pollState.polls. length > 0 ? (\r\n        <div>\r\n          {userState.user.votes.map((userPoll) => {\r\n            return (\r\n              <Link to={`/poll/${userPoll}`}>\r\n                {pollState.polls.find((poll) => poll._id === userPoll).pollName}\r\n              </Link>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <p>you didn't vote yet</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\constant.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\user-reducer.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\action.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\store.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\index.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\poll-reducer.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":27},{"ruleId":"95","severity":1,"message":"99","line":6,"column":3,"nodeType":"97","messageId":"98","endLine":6,"endColumn":13},{"ruleId":"95","severity":1,"message":"100","line":9,"column":10,"nodeType":"97","messageId":"98","endLine":9,"endColumn":21},{"ruleId":"95","severity":1,"message":"101","line":9,"column":36,"nodeType":"97","messageId":"98","endLine":9,"endColumn":45},{"ruleId":"102","severity":1,"message":"103","line":29,"column":6,"nodeType":"104","endLine":29,"endColumn":17,"suggestions":"105"},{"ruleId":"95","severity":1,"message":"100","line":7,"column":3,"nodeType":"97","messageId":"98","endLine":7,"endColumn":14},{"ruleId":"95","severity":1,"message":"106","line":8,"column":3,"nodeType":"97","messageId":"98","endLine":8,"endColumn":14},{"ruleId":"95","severity":1,"message":"101","line":9,"column":3,"nodeType":"97","messageId":"98","endLine":9,"endColumn":12},{"ruleId":"95","severity":1,"message":"107","line":14,"column":3,"nodeType":"97","messageId":"98","endLine":14,"endColumn":11},{"ruleId":"108","severity":1,"message":"109","line":159,"column":42,"nodeType":"110","messageId":"111","endLine":159,"endColumn":44},{"ruleId":"102","severity":1,"message":"112","line":174,"column":6,"nodeType":"104","endLine":174,"endColumn":8,"suggestions":"113"},{"ruleId":"95","severity":1,"message":"114","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":25},{"ruleId":"95","severity":1,"message":"115","line":5,"column":22,"nodeType":"97","messageId":"98","endLine":5,"endColumn":33},{"ruleId":"95","severity":1,"message":"100","line":7,"column":3,"nodeType":"97","messageId":"98","endLine":7,"endColumn":14},{"ruleId":"95","severity":1,"message":"106","line":8,"column":3,"nodeType":"97","messageId":"98","endLine":8,"endColumn":14},{"ruleId":"95","severity":1,"message":"101","line":9,"column":3,"nodeType":"97","messageId":"98","endLine":9,"endColumn":12},{"ruleId":"95","severity":1,"message":"107","line":14,"column":3,"nodeType":"97","messageId":"98","endLine":14,"endColumn":11},{"ruleId":"108","severity":1,"message":"109","line":82,"column":42,"nodeType":"110","messageId":"111","endLine":82,"endColumn":44},{"ruleId":"116","severity":1,"message":"117","line":51,"column":25,"nodeType":"118","messageId":"119","endLine":51,"endColumn":27},{"ruleId":"95","severity":1,"message":"114","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":25},{"ruleId":"95","severity":1,"message":"120","line":3,"column":22,"nodeType":"97","messageId":"98","endLine":3,"endColumn":31},{"ruleId":"95","severity":1,"message":"121","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":18},{"ruleId":"95","severity":1,"message":"115","line":5,"column":22,"nodeType":"97","messageId":"98","endLine":5,"endColumn":33},{"ruleId":"95","severity":1,"message":"100","line":7,"column":3,"nodeType":"97","messageId":"98","endLine":7,"endColumn":14},{"ruleId":"95","severity":1,"message":"106","line":8,"column":3,"nodeType":"97","messageId":"98","endLine":8,"endColumn":14},{"ruleId":"95","severity":1,"message":"101","line":9,"column":3,"nodeType":"97","messageId":"98","endLine":9,"endColumn":12},{"ruleId":"95","severity":1,"message":"107","line":14,"column":3,"nodeType":"97","messageId":"98","endLine":14,"endColumn":11},{"ruleId":"95","severity":1,"message":"122","line":16,"column":10,"nodeType":"97","messageId":"98","endLine":16,"endColumn":15},{"ruleId":"102","severity":1,"message":"112","line":53,"column":6,"nodeType":"104","endLine":53,"endColumn":8,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":62,"column":32,"nodeType":"126","messageId":"127","endLine":62,"endColumn":55,"fix":"128"},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'requestUser' is defined but never used.","'userError' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'receiveUser' is defined but never used.","'votePoll' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook React.useEffect has missing dependencies: 'fetchAllPolls' and 'pollState.polls.length'. Either include them or remove the dependency array.",["132"],"'useState' is defined but never used.","'initialData' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useParams' is defined but never used.","'PieChart' is defined but never used.","'COLOR' is defined but never used.",["133"],"no-whitespace-before-property","Unexpected whitespace before property length.","MemberExpression","unexpectedWhitespace",{"range":"134","text":"135"},"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"138","fix":"140"},[1556,1558],".","Update the dependencies array to be: [dispatch, userState]",{"range":"141","text":"142"},"Update the dependencies array to be: [fetchAllPolls, pollState.polls.length]",{"range":"143","text":"144"},{"range":"145","text":"144"},[846,857],"[dispatch, userState]",[3998,4000],"[fetchAllPolls, pollState.polls.length]",[1303,1305]]
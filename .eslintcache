[{"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\index.js":"1","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\App.js":"2","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\GlobalStyles.js":"3","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\home-page\\index.jsx":"4","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\poll-page\\index.jsx":"5","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\log-in-page\\index.jsx":"6","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\user-page\\index.jsx":"7","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\constant.js":"8"},{"size":263,"mtime":1611238545877,"results":"9","hashOfConfig":"10"},{"size":675,"mtime":1612121936281,"results":"11","hashOfConfig":"10"},{"size":1658,"mtime":1611238521110,"results":"12","hashOfConfig":"10"},{"size":4116,"mtime":1611974163734,"results":"13","hashOfConfig":"10"},{"size":103,"mtime":1611255980813,"results":"14","hashOfConfig":"10"},{"size":1969,"mtime":1612147579669,"results":"15","hashOfConfig":"10"},{"size":103,"mtime":1611255978603,"results":"16","hashOfConfig":"10"},{"size":186,"mtime":1611955444692,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ja0ftj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":2,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\index.js",[],["37","38"],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\App.js",["39","40","41","42"],"import React, { useContext, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  useHistory,\n} from \"react-router-dom\";\nimport Home from './components/home-page';\nimport Poll from './components/poll-page';\nimport LogIn from './components/log-in-page';\nimport User from './components/user-page'\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path={'/'}>\n        <LogIn />\n      </Route>\n      <Route path={'/home'}>\n        <Home />\n      </Route>\n      <Route path={'/poll/:pollid'}>\n        <Poll />\n      </Route>\n      <Route path={'/user/:userid'}>\n        <User />\n      </Route>\n    </Router>\n    );\n}\n\nexport default App;\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\GlobalStyles.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\home-page\\index.jsx",["43"],"import React, { useState } from \"react\";\r\n\r\nimport { SERVER_URL, initialData } from '../../constant';\r\n\r\nfunction Home() {\r\n  const [pollCreation, setPollCreation] = useState(false);\r\n  const [pollName, setPollName] = useState('');\r\n  const [pollOptions, setPollOptions] = useState(initialData);\r\n  const [allPolls, setAllPolls] = useState([]);\r\n\r\n  const handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    fetch(SERVER_URL + `/api/newpoll`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        pollName,\r\n        pollOptions,\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(poll => {\r\n        fetchAllPolls()\r\n      })\r\n      .catch(err => console.log(err))\r\n    \r\n    setPollName('')\r\n    setPollOptions(initialData)\r\n  }\r\n\r\n  const fetchAllPolls = () => {\r\n    fetch(SERVER_URL + `/api/getpolls`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setAllPolls(data.polls)\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  const addOption = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    const newData = {\r\n      optionName: '',\r\n      voters: [],\r\n    }\r\n\r\n    const newOptions = [...pollOptions]\r\n\r\n    newOptions.push(newData)\r\n\r\n    setPollOptions(newOptions);\r\n  }\r\n\r\n  const removeOption = (ev, index) => {\r\n    ev.preventDefault();\r\n\r\n    const updatedOptions = pollOptions.filter((option, id) => id !== index);\r\n\r\n    setPollOptions(updatedOptions)\r\n  }\r\n\r\n  const updatePollName = (ev) => {\r\n    setPollName(ev.currentTarget.value)\r\n  }\r\n\r\n  const updateOptionName = (ev, index) => {\r\n    const updatedOptions = [...pollOptions]\r\n\r\n    updatedOptions[index].optionName = ev.currentTarget.value\r\n\r\n    setPollOptions(updatedOptions)\r\n  }\r\n\r\n  const handleVote = (ev, _id, optionName) => {\r\n    ev.preventDefault();\r\n\r\n    fetch(SERVER_URL + `/api/votepoll`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        optionName,\r\n        _id,\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(poll => {\r\n        fetchAllPolls()\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\nconsole.log(allPolls)\r\n  React.useEffect(() => {\r\n    if (allPolls.length === 0) {\r\n      fetchAllPolls()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {pollCreation ? <form onSubmit={handleSubmit}>\r\n        <p onClick={() => setPollCreation(!pollCreation)}>Hide</p>\r\n        <label>\r\n          <input onChange={updatePollName} value={pollName} type={'text'} placeholder={'Poll Name'} required />\r\n        </label>\r\n        <div id={'option-input'}>\r\n\r\n          {\r\n            pollOptions.map((option, index) => {\r\n              return <>\r\n                <label>\r\n                  <input onChange={(ev) => updateOptionName(ev, index)} value={pollOptions[index].optionName} className={`option-${index}`} type={'text'} placeholder={'Option'} required />\r\n                  {(pollOptions.length > 2) && <button type={'button'} className={`option-${index}`} onClick={(ev) => removeOption(ev, index)} >-</button>}\r\n                </label>\r\n                {(index === pollOptions.length - 1 && pollOptions.length < 5) && <button type={'button'} onClick={(ev) => addOption(ev)} >+</button>}\r\n              </>\r\n            })\r\n          }\r\n\r\n        </div>\r\n        <button type={\"submit\"}>Submit Poll</button>\r\n      </form> : <div onClick={() => setPollCreation(!pollCreation)}>Create A Poll</div> }\r\n      \r\n      <div>\r\n        {\r\n          allPolls.map(poll => {\r\n            return <div>\r\n              <p>{poll.pollName}</p>\r\n              <ul>\r\n                {poll.options.map(option => {\r\n                  return <>\r\n                    <li>{`${option.voters.length} - ${option.optionName}`}</li>\r\n                    <button type={'button'} onClick={(ev) => handleVote(ev, poll._id, option.optionName)} >vote</button>\r\n                  </>\r\n\r\n                })}\r\n              </ul>\r\n            </div>\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\poll-page\\index.jsx",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\log-in-page\\index.jsx",["44","45","46","47","48","49","50","51","52","53"],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\user-page\\index.jsx",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\constant.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":27},{"ruleId":"58","severity":1,"message":"62","line":1,"column":29,"nodeType":"60","messageId":"61","endLine":1,"endColumn":38},{"ruleId":"58","severity":1,"message":"63","line":5,"column":3,"nodeType":"60","messageId":"61","endLine":5,"endColumn":11},{"ruleId":"58","severity":1,"message":"64","line":6,"column":3,"nodeType":"60","messageId":"61","endLine":6,"endColumn":13},{"ruleId":"65","severity":1,"message":"66","line":102,"column":6,"nodeType":"67","endLine":102,"endColumn":8,"suggestions":"68"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":27},{"ruleId":"58","severity":1,"message":"69","line":2,"column":22,"nodeType":"60","messageId":"61","endLine":2,"endColumn":33},{"ruleId":"58","severity":1,"message":"70","line":6,"column":20,"nodeType":"60","messageId":"61","endLine":6,"endColumn":31},{"ruleId":"58","severity":1,"message":"71","line":7,"column":20,"nodeType":"60","messageId":"61","endLine":7,"endColumn":31},{"ruleId":"58","severity":1,"message":"72","line":8,"column":17,"nodeType":"60","messageId":"61","endLine":8,"endColumn":25},{"ruleId":"58","severity":1,"message":"73","line":9,"column":10,"nodeType":"60","messageId":"61","endLine":9,"endColumn":25},{"ruleId":"58","severity":1,"message":"74","line":9,"column":27,"nodeType":"60","messageId":"61","endLine":9,"endColumn":45},{"ruleId":"58","severity":1,"message":"75","line":16,"column":9,"nodeType":"60","messageId":"61","endLine":16,"endColumn":20},{"ruleId":"76","severity":2,"message":"77","line":21,"column":5,"nodeType":"60","messageId":"78","endLine":21,"endColumn":7},{"ruleId":"76","severity":2,"message":"79","line":40,"column":9,"nodeType":"60","messageId":"78","endLine":40,"endColumn":22},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Redirect' is defined but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'allPolls.length'. Either include it or remove the dependency array.","ArrayExpression",["82"],"'initialData' is defined but never used.","'setPassword' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'handleLogin' is assigned a value but never used.","no-undef","'ev' is not defined.","undef","'fetchAllPolls' is not defined.","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [allPolls.length]",{"range":"85","text":"86"},[2331,2333],"[allPolls.length]"]
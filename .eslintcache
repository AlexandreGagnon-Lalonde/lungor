[{"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\index.js":"1","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\App.js":"2","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\GlobalStyles.js":"3","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\home-page\\index.jsx":"4","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\poll-page\\index.jsx":"5","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\log-in-page\\index.jsx":"6","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\user-page\\index.jsx":"7","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\constant.js":"8","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\user-reducer.js":"9","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\action.js":"10","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\store.js":"11","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\index.js":"12","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\poll-reducer.js":"13"},{"size":431,"mtime":1612314588518,"results":"14","hashOfConfig":"15"},{"size":1304,"mtime":1612992176014,"results":"16","hashOfConfig":"15"},{"size":1727,"mtime":1613437854789,"results":"17","hashOfConfig":"15"},{"size":12384,"mtime":1614708906027,"results":"18","hashOfConfig":"15"},{"size":6946,"mtime":1614647701869,"results":"19","hashOfConfig":"15"},{"size":6615,"mtime":1613524217858,"results":"20","hashOfConfig":"15"},{"size":1964,"mtime":1613090423273,"results":"21","hashOfConfig":"15"},{"size":474,"mtime":1613611229286,"results":"22","hashOfConfig":"15"},{"size":726,"mtime":1612321768557,"results":"23","hashOfConfig":"15"},{"size":593,"mtime":1612316204270,"results":"24","hashOfConfig":"15"},{"size":303,"mtime":1612230258239,"results":"25","hashOfConfig":"15"},{"size":175,"mtime":1612230243143,"results":"26","hashOfConfig":"15"},{"size":791,"mtime":1612313875949,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ja0ftj",{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\index.js",[],["59","60"],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\App.js",["61","62","63","64","65"],"import React, { useContext, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  useHistory,\n} from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { requestUser, receiveUser, userError } from \"./reducer/action\";\n\nimport Home from \"./components/home-page\";\nimport Poll from \"./components/poll-page\";\nimport LogIn from \"./components/log-in-page\";\nimport User from \"./components/user-page\";\n\nfunction App() {\n  const userState = useSelector((state) => state.user);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser && !userState.user) {\n      const foundUser = JSON.parse(loggedInUser);\n      dispatch(receiveUser(foundUser));\n    } else if (userState.user) {\n      <Redirect to={'/'} />\n    }\n  }, [userState]);\n\n  return (\n    <Router>\n      {userState.user ? (\n        <>\n          <Route exact path={\"/\"}>\n            <Home />\n          </Route>\n          <Route path={\"/poll/:pollId\"}>\n            <Poll />\n          </Route>\n          <Route path={\"/user/:userId\"}>\n            <User />\n          </Route>\n        </>\n      ) : (\n        <Route exact path={\"/\"}>\n          <LogIn />\n        </Route>\n      )}\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\GlobalStyles.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\home-page\\index.jsx",["66","67"],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\poll-page\\index.jsx",["68","69","70"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport { SERVER_URL } from '../../constant';\r\nimport styled from \"styled-components\";\r\nimport {\r\n  userLogout,\r\n  receivePolls,\r\n  requestPolls,\r\n  pollError,\r\n} from \"../../reducer/action\";\r\nimport { COLOR } from '../../constant'\r\n\r\nfunction Poll() {\r\n  const userState = useSelector(state => state.user)\r\n  const pollState = useSelector(state => state.poll)\r\n\r\n  const [hover, setHover] = useState({pollName: '', index: -1})\r\n\r\n  const { pollId } = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const currentPoll = pollState.polls.find(poll => poll._id === pollId);\r\n\r\n  const handleLogout = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(userLogout());\r\n\r\n    history.push('/')\r\n\r\n    localStorage.clear();\r\n  }\r\n\r\n  const handleVote = (ev, _id, title) => {\r\n    ev.preventDefault();\r\n\r\n    fetch(SERVER_URL + `/api/votepoll`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        user: userState.user,\r\n        title,\r\n        _id,\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(poll => {\r\n        fetchAllPolls()\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  const fetchAllPolls = () => {\r\n    dispatch(requestPolls());\r\n\r\n    fetch(SERVER_URL + `/api/getpolls`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        dispatch(receivePolls(data.polls))\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n  }\r\n\r\n  const handleColorChange = (pollData) => {\r\n    const colorOrder = [];\r\n\r\n    pollData.options.forEach(option => colorOrder.push({value: option.value, title: option.title}))\r\n\r\n    colorOrder.sort((a,b) => a.value > b.value ? 1: -1)\r\n\r\n    pollData.options.map((option, index) => {\r\n      const indexValue = colorOrder.findIndex(x => x.title === option.title)\r\n\r\n      option.color = COLOR.RED_GRADIENT[indexValue]\r\n\r\n      if (option.voters.find(voter => voter === userState.user.username)) {\r\n        option.color = COLOR.GREEN\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleNavigateHome = () => {\r\n    history.push('/')\r\n  }\r\n\r\n  pollState.polls.length > 0 && handleColorChange(currentPoll)\r\n\r\n  React.useEffect(() => {\r\n    if (pollState.polls.length === 0) {\r\n      fetchAllPolls()\r\n    }\r\n  }, [])\r\n\r\n  return <>\r\n    <NavContainer>\r\n      \r\n      <ProfileLink to={`/user/${userState.user.username}`}>{userState.user.username}</ProfileLink>\r\n      <Buttons>\r\n        <Button onClick={handleNavigateHome}>Go Back Home</Button>\r\n        {userState && <Button onClick={handleLogout}>Adi√≥s</Button>}\r\n      </Buttons>\r\n    </NavContainer>\r\n    {\r\n          pollState.polls.map((poll, index) => {\r\n            if (poll._id === pollId) {\r\n              let amountOfVotes = 0;\r\n            \r\n            handleColorChange(poll);\r\n\r\n            poll.options.forEach((votes, index) => {\r\n              amountOfVotes += votes.voters.length\r\n              if (hover.index === index && poll.pollName === hover.pollName) {\r\n                poll.options[index] = { ...votes, color: `${COLOR.SAND}`}\r\n              }\r\n            })\r\n\r\n            return <PollContainer key={index} >\r\n              <PollName to={`/poll/${poll._id}`}>{poll.pollName}</PollName>\r\n\r\n              <PollDataContainer>\r\n                  {amountOfVotes > 0 ? <PieChart data={poll.options} segmentsStyle={{ cursor: 'pointer' }} style={{ width: '300px', margin: '10px 0', padding: '0px 25px' }} onClick={(ev, index) => handleVote(ev, poll._id, poll.options[index].title)} onMouseOver={(_, index) => {setHover({ pollName: poll.pollName, index })}} onMouseOut={() => setHover({pollName: '', index: -1})} startAngle={270} lineWidth={35} /> : <FirstToVoteContainer><FirstToVoteParagraph>Be the first to vote!</FirstToVoteParagraph></FirstToVoteContainer>}\r\n    \r\n                <PollChoices>\r\n                  {poll.options.map(option => {\r\n                    return <>\r\n                      <PollIndicatorContainer onClick={(ev) => handleVote(ev, poll._id, option.title)} >\r\n                        <PollColorIndicator style={{ background: `${option.color}`}}>{option.voters.length}</PollColorIndicator>\r\n                        {option.title}\r\n                      </PollIndicatorContainer>\r\n                    </>\r\n                  })}\r\n                </PollChoices>\r\n              </PollDataContainer>\r\n            </PollContainer>\r\n            }\r\n          })\r\n        }\r\n  </>;\r\n}\r\n\r\nexport default Poll;\r\n\r\nconst NavContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`\r\nconst ProfileLink = styled(Link)`\r\n  color: ${COLOR.SAND};\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  padding: 5px 10px;\r\n  margin-left: 5px;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.LIGHTROCK};\r\n    border-radius: 5px;\r\n  }\r\n`\r\nconst Buttons = styled.div``\r\nconst Button = styled.button`\r\n  background-color: ${COLOR.ROCK};\r\n  border: 2px solid ${COLOR.WOOD};\r\n  border-radius: 5px;\r\n  padding: 5px 10px;\r\n  margin: 5px;\r\n  color: ${COLOR.SAND};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.SAND};\r\n    border: 2px solid ${COLOR.SAND};\r\n    color: ${COLOR.ROCK};\r\n  }\r\n`\r\nconst PollColorIndicator = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  width: 30px;\r\n  height: 30px;\r\n  margin-right: 10px;\r\n  color: black;\r\n`\r\nconst PollIndicatorContainer = styled.li`\r\n  display: flex;\r\n  margin: 10px auto 0 auto;\r\n  transform: translatey(-5px);\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: black;\r\n\r\n  &:hover {\r\n    color: ${COLOR.SAND};\r\n\r\n    ${PollColorIndicator} {\r\n      color: black;\r\n    }\r\n  }\r\n`\r\nconst PollContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 90%;\r\n  background-color: ${COLOR.WOOD};\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  border-radius: 10px;\r\n\r\n`\r\nconst PollName = styled(Link)`\r\n  margin: 5px;\r\n  width: auto;\r\n  padding: 5px 20px;\r\n  color: black;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  font-size: 1.4em;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.SAND};\r\n  }\r\n`\r\nconst PollDataContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  padding: 10px 0;\r\n`\r\nconst PollChoices = styled.ul`\r\n  width: 100px;\r\n  margin: auto 20px auto 0;\r\n`\r\nconst FirstToVoteContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 300px;\r\n  height: 200px;\r\n  margin: 10px 0;\r\n`\r\nconst FirstToVoteParagraph = styled.p`\r\n  font-weight: bold;\r\n`","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\log-in-page\\index.jsx",["71"],"import React, { useState } from \"react\";\r\nimport { SERVER_URL } from '../../constant';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  requestUser,\r\n  receiveUser,\r\n  userError,\r\n} from \"../../reducer/action\";\r\nimport { COLOR } from '../../constant';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nfunction LogIn() {\r\n  const userState = useSelector(state => state.user)\r\n\r\n  const [newUser, setNewUser] = useState(false);\r\n  const [password, setPassword] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const handleUserForm = (ev) => {\r\n    ev.preventDefault();\r\n    setNewUser(!newUser);\r\n    setPassword('');\r\n    setUsername('');\r\n    setConfirmPassword('');\r\n  };\r\n\r\n  const handleLogin = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(requestUser())\r\n\r\n    fetch(SERVER_URL + `/api/getuser/${username}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        password\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.status == 200) {\r\n          dispatch(receiveUser(data.user))\r\n          dispatch(userError(''))\r\n          localStorage.setItem('user', JSON.stringify(data.user))\r\n          history.push('/')\r\n        } else {\r\n          dispatch(userError(data.message))\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(userError(err.message))\r\n      })\r\n  }\r\n\r\n  const checkPasswordComplexity = (pwd) => {\r\n    const hasUppercase = /[A-Z]/.test(pwd)\r\n    const hasLowercase = /[a-z]/.test(pwd)\r\n    const hasNumber = /[\\d]/.test(pwd)\r\n    const hasNonAlpha = /[\\W]/.test(pwd)\r\n\r\n    const validity = hasLowercase + hasNonAlpha + hasNumber + hasUppercase\r\n\r\n    return validity >= 4\r\n  }\r\n\r\n  const handleSignup = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    const user = {\r\n      username,\r\n      password,\r\n      votes: [],\r\n    }\r\n\r\n    const passwordComplexity = checkPasswordComplexity(password)\r\n    const passwordCheck = password === confirmPassword\r\n\r\n    if (passwordCheck && passwordComplexity) {\r\n      fetch(SERVER_URL + `/api/createuser`, {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          user\r\n        })\r\n      })\r\n        .then(res => res.json())\r\n        .then(poll => {\r\n          if (poll.status === 201) {\r\n            setMessage('')\r\n            dispatch(receiveUser(poll.user))\r\n            localStorage.setItem('user', JSON.stringify(poll.user))\r\n            history.push('/')\r\n          } else {\r\n            setMessage(poll.message)\r\n          }\r\n        })\r\n        .catch(err => console.log(err.message))\r\n    } else if (passwordCheck && !passwordComplexity) {\r\n      setMessage('Please use a more complex password')\r\n    } else {\r\n      setMessage('Please confirm your password')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <LogInContainer>\r\n      {newUser ? (\r\n        <FormContainer>\r\n          <form onSubmit={handleSignup}>\r\n            <InputContainer>\r\n              <StyledField label={'Username'} onChange={(ev) => setUsername(ev.currentTarget.value)} value={username} variant={'outlined'} required />\r\n              <StyledField label={'Password'} type={'password'} onChange={(ev) => setPassword(ev.currentTarget.value)} value={password} variant={'outlined'} required />\r\n              <StyledField label={'Confirm Password'} type={'password'} onChange={(ev) => setConfirmPassword(ev.currentTarget.value)} value={confirmPassword} variant={'outlined'} required />\r\n            </InputContainer>\r\n            <LogInButton type={\"submit\"}>Sign Up</LogInButton>\r\n          </form>\r\n          <ChangeFormButton type={\"button\"} onClick={handleUserForm}>\r\n            Already a member?\r\n          </ChangeFormButton>\r\n        </FormContainer>\r\n      ) : (\r\n        <FormContainer>\r\n          <form onSubmit={handleLogin}>\r\n            <InputContainer>\r\n              <StyledField onChange={(ev) => setUsername(ev.currentTarget.value)} type={\"text\"} variant={'outlined'} label={'Username'} required />\r\n              <StyledField onChange={(ev) => setPassword(ev.currentTarget.value)} type={\"password\"} variant={'outlined'} label={'Password'} required />\r\n            </InputContainer>\r\n            <LogInButton type={\"submit\"}>Log In</LogInButton>\r\n          </form>\r\n          <ChangeFormButton type={\"button\"} onClick={handleUserForm}>\r\n            First Time Here ?\r\n          </ChangeFormButton>\r\n        </FormContainer>\r\n      )}\r\n      {message && <p>{message}</p>}\r\n      {userState.message && <p>{userState.message}</p>}\r\n    </LogInContainer>\r\n  );\r\n}\r\n\r\nexport default LogIn;\r\n\r\nconst LogInContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  padding-bottom: 100px;\r\n`\r\nconst FormContainer = styled.div`\r\n  width: 350px;\r\n  height: 400px;\r\n  background: ${COLOR.SAND};\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  border-radius: 5px;\r\n`\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`\r\nconst StyledField = withStyles({\r\n  root: {\r\n    marginBottom: '10px',\r\n    '& label.Mui-focused': {\r\n      color: `${COLOR.ROCK}`,\r\n      fontWeight: 'bold',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: `${COLOR.ROCK}`,\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: `${COLOR.ROCK}`,\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: `${COLOR.ROCK}`,\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: `${COLOR.ROCK}`,\r\n      },\r\n    },\r\n  },\r\n})(TextField)\r\nconst LogInButton = styled.button`\r\n  height: 30px;\r\n  width: 100%;\r\n  color: ${COLOR.SAND};\r\n  background: ${COLOR.ROCK};\r\n  border: 1px solid ${COLOR.WOOD};\r\n  border-radius: 5px;\r\n  transition: all 0.1s;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    font-weight: bold;\r\n  }\r\n`\r\nconst ChangeFormButton = styled.button`\r\n  background-color: ${COLOR.SAND};\r\n  border: none;\r\n  color: ${COLOR.ROCK};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\user-page\\index.jsx",["72","73","74","75","76","77","78","79","80","81","82"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport { SERVER_URL, initialData } from '../../constant';\r\nimport {\r\n  requestUser,\r\n  receiveUser,\r\n  userError,\r\n  userLogout,\r\n  receivePolls,\r\n  requestPolls,\r\n  pollError,\r\n  votePoll,\r\n} from \"../../reducer/action\";\r\nimport { COLOR } from '../../constant'\r\n\r\nfunction User() {\r\n  const userState = useSelector((state) => state.user);\r\n  const pollState = useSelector((state) => state.poll);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const handleLogout = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(userLogout());\r\n\r\n    history.push('/')\r\n\r\n    localStorage.clear();\r\n  }\r\n  const fetchAllPolls = () => {\r\n    dispatch(requestPolls());\r\n\r\n    fetch(SERVER_URL + `/api/getpolls`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        dispatch(receivePolls(data.polls))\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (pollState.polls.length === 0) {\r\n      fetchAllPolls()\r\n    }\r\n  }, [])\r\n\r\nconsole.log(pollState.polls.length)\r\n  return (\r\n    <>\r\n      <div>\r\n        <Link to={`/`}>Back To Voting</Link>\r\n        {userState && <button onClick={handleLogout}>Leave</button>}\r\n      </div>\r\n      {userState.user.votes && pollState.polls. length > 0 ? (\r\n        <div>\r\n          {userState.user.votes.map((userPoll) => {\r\n            return (\r\n              <Link to={`/poll/${userPoll}`}>\r\n                {pollState.polls.find((poll) => poll._id === userPoll).pollName}\r\n              </Link>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <p>you didn't vote yet</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\constant.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\user-reducer.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\action.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\store.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\index.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\poll-reducer.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":27},{"ruleId":"87","severity":1,"message":"91","line":6,"column":3,"nodeType":"89","messageId":"90","endLine":6,"endColumn":13},{"ruleId":"87","severity":1,"message":"92","line":9,"column":10,"nodeType":"89","messageId":"90","endLine":9,"endColumn":21},{"ruleId":"87","severity":1,"message":"93","line":9,"column":36,"nodeType":"89","messageId":"90","endLine":9,"endColumn":45},{"ruleId":"94","severity":1,"message":"95","line":29,"column":6,"nodeType":"96","endLine":29,"endColumn":17,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":157,"column":42,"nodeType":"100","messageId":"101","endLine":157,"endColumn":44},{"ruleId":"94","severity":1,"message":"102","line":176,"column":6,"nodeType":"96","endLine":176,"endColumn":8,"suggestions":"103"},{"ruleId":"98","severity":1,"message":"99","line":81,"column":42,"nodeType":"100","messageId":"101","endLine":81,"endColumn":44},{"ruleId":"94","severity":1,"message":"102","line":102,"column":6,"nodeType":"96","endLine":102,"endColumn":8,"suggestions":"104"},{"ruleId":"98","severity":1,"message":"105","line":114,"column":45,"nodeType":"100","messageId":"106","endLine":114,"endColumn":47},{"ruleId":"107","severity":1,"message":"108","line":51,"column":25,"nodeType":"109","messageId":"110","endLine":51,"endColumn":27},{"ruleId":"87","severity":1,"message":"111","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"112","line":3,"column":22,"nodeType":"89","messageId":"90","endLine":3,"endColumn":31},{"ruleId":"87","severity":1,"message":"113","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":18},{"ruleId":"87","severity":1,"message":"114","line":5,"column":22,"nodeType":"89","messageId":"90","endLine":5,"endColumn":33},{"ruleId":"87","severity":1,"message":"92","line":7,"column":3,"nodeType":"89","messageId":"90","endLine":7,"endColumn":14},{"ruleId":"87","severity":1,"message":"115","line":8,"column":3,"nodeType":"89","messageId":"90","endLine":8,"endColumn":14},{"ruleId":"87","severity":1,"message":"93","line":9,"column":3,"nodeType":"89","messageId":"90","endLine":9,"endColumn":12},{"ruleId":"87","severity":1,"message":"116","line":14,"column":3,"nodeType":"89","messageId":"90","endLine":14,"endColumn":11},{"ruleId":"87","severity":1,"message":"117","line":16,"column":10,"nodeType":"89","messageId":"90","endLine":16,"endColumn":15},{"ruleId":"94","severity":1,"message":"102","line":53,"column":6,"nodeType":"96","endLine":53,"endColumn":8,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":62,"column":32,"nodeType":"121","messageId":"122","endLine":62,"endColumn":55,"fix":"123"},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'requestUser' is defined but never used.","'userError' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["126"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook React.useEffect has missing dependencies: 'fetchAllPolls' and 'pollState.polls.length'. Either include them or remove the dependency array.",["127"],["128"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useParams' is defined but never used.","'PieChart' is defined but never used.","'initialData' is defined but never used.","'receiveUser' is defined but never used.","'votePoll' is defined but never used.","'COLOR' is defined but never used.",["129"],"no-whitespace-before-property","Unexpected whitespace before property length.","MemberExpression","unexpectedWhitespace",{"range":"130","text":"131"},"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"134","fix":"136"},{"desc":"134","fix":"137"},[1556,1558],".","Update the dependencies array to be: [dispatch, userState]",{"range":"138","text":"139"},"Update the dependencies array to be: [fetchAllPolls, pollState.polls.length]",{"range":"140","text":"141"},{"range":"142","text":"141"},{"range":"143","text":"141"},[846,857],"[dispatch, userState]",[4139,4141],"[fetchAllPolls, pollState.polls.length]",[2594,2596],[1303,1305]]
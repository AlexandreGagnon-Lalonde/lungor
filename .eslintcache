[{"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\index.js":"1","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\App.js":"2","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\GlobalStyles.js":"3","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\home-page\\index.jsx":"4","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\poll-page\\index.jsx":"5","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\log-in-page\\index.jsx":"6","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\user-page\\index.jsx":"7","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\constant.js":"8","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\user-reducer.js":"9","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\action.js":"10","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\store.js":"11","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\index.js":"12","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\poll-reducer.js":"13"},{"size":431,"mtime":1612314588518,"results":"14","hashOfConfig":"15"},{"size":1304,"mtime":1612992176014,"results":"16","hashOfConfig":"15"},{"size":1727,"mtime":1613437854789,"results":"17","hashOfConfig":"15"},{"size":12969,"mtime":1614892257440,"results":"18","hashOfConfig":"15"},{"size":7533,"mtime":1614992714997,"results":"19","hashOfConfig":"15"},{"size":6615,"mtime":1614893863185,"results":"20","hashOfConfig":"15"},{"size":3660,"mtime":1614817474795,"results":"21","hashOfConfig":"15"},{"size":474,"mtime":1613611229286,"results":"22","hashOfConfig":"15"},{"size":726,"mtime":1612321768557,"results":"23","hashOfConfig":"15"},{"size":593,"mtime":1612316204270,"results":"24","hashOfConfig":"15"},{"size":303,"mtime":1612230258239,"results":"25","hashOfConfig":"15"},{"size":175,"mtime":1612230243143,"results":"26","hashOfConfig":"15"},{"size":791,"mtime":1612313875949,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ja0ftj",{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\index.js",[],["59","60"],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\App.js",["61","62","63","64","65"],"import React, { useContext, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  useHistory,\n} from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { requestUser, receiveUser, userError } from \"./reducer/action\";\n\nimport Home from \"./components/home-page\";\nimport Poll from \"./components/poll-page\";\nimport LogIn from \"./components/log-in-page\";\nimport User from \"./components/user-page\";\n\nfunction App() {\n  const userState = useSelector((state) => state.user);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser && !userState.user) {\n      const foundUser = JSON.parse(loggedInUser);\n      dispatch(receiveUser(foundUser));\n    } else if (userState.user) {\n      <Redirect to={'/'} />\n    }\n  }, [userState]);\n\n  return (\n    <Router>\n      {userState.user ? (\n        <>\n          <Route exact path={\"/\"}>\n            <Home />\n          </Route>\n          <Route path={\"/poll/:pollId\"}>\n            <Poll />\n          </Route>\n          <Route path={\"/user/:userId\"}>\n            <User />\n          </Route>\n        </>\n      ) : (\n        <Route exact path={\"/\"}>\n          <LogIn />\n        </Route>\n      )}\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\GlobalStyles.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\home-page\\index.jsx",["66","67","68"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport styled, { css } from \"styled-components\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { SERVER_URL, initialData, COLOR } from '../../constant';\r\nimport {\r\n  userLogout,\r\n  receivePolls,\r\n  requestPolls,\r\n  pollError,\r\n  requestUser,\r\n  receiveUser,\r\n  userError,\r\n} from \"../../reducer/action\";\r\n\r\nfunction Home() {\r\n  const userState = useSelector(state => state.user)\r\n  const pollState = useSelector(state => state.poll)\r\n\r\n  const [pollCreation, setPollCreation] = useState(false);\r\n  const [pollName, setPollName] = useState('');\r\n  const [pollOptions, setPollOptions] = useState(initialData);\r\n  const [hover, setHover] = useState({pollName: '', index: -1})\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    fetch(SERVER_URL + `/api/newpoll`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        pollName,\r\n        pollOptions,\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(poll => {\r\n        fetchAllPolls()\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n\r\n    setPollName('')\r\n    setPollOptions([\r\n      {\r\n        title: \"\",\r\n        value: 0,\r\n        color: '',\r\n        voters: [],\r\n      },\r\n      {\r\n        title: \"\",\r\n        value: 0,\r\n        color: '',\r\n        voters: [],\r\n      },\r\n    ])\r\n    setPollCreation(false)\r\n  }\r\n\r\n  const fetchAllPolls = () => {\r\n    dispatch(requestPolls());\r\n\r\n    fetch(SERVER_URL + `/api/getpolls`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        dispatch(receivePolls(data.polls))\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n  }\r\n\r\n  const fetchUser = () => {\r\n    dispatch(requestUser());\r\n\r\n    fetch(SERVER_URL + `/api/getuser/${userState.user.username}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({alreadyLoggedIn: true})\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        dispatch(receiveUser(data.user))\r\n        console.log(data.user)\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(pollError(err.message))\r\n      })\r\n  }\r\n\r\n  const addOption = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    const newData = {\r\n      title: \"\",\r\n      value: 0,\r\n      color: '',\r\n      voters: [],\r\n    }\r\n\r\n    const newOptions = [...pollOptions]\r\n\r\n    newOptions.push(newData)\r\n\r\n    setPollOptions(newOptions);\r\n  }\r\n\r\n  const removeOption = (ev, index) => {\r\n    ev.preventDefault();\r\n\r\n    const updatedOptions = pollOptions.filter((option, id) => id !== index);\r\n\r\n    setPollOptions(updatedOptions)\r\n  }\r\n\r\n  const updatePollName = (ev) => {\r\n    setPollName(ev.currentTarget.value)\r\n  }\r\n\r\n  const updateOptionName = (ev, index) => {\r\n    const updatedOptions = [...pollOptions]\r\n\r\n    updatedOptions[index].title = ev.currentTarget.value\r\n\r\n    setPollOptions(updatedOptions)\r\n  }\r\n\r\n  const handleVote = (ev, _id, title) => {\r\n    ev.preventDefault();\r\n\r\n    fetch(SERVER_URL + `/api/votepoll`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        user: userState.user,\r\n        title,\r\n        _id,\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(poll => {\r\n        fetchAllPolls()\r\n        fetchUser()\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  const handleLogout = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(userLogout());\r\n\r\n    history.push('/')\r\n\r\n    localStorage.clear();\r\n  }\r\n\r\n  const handleColorChange = (pollData) => {\r\n    const colorOrder = [];\r\n\r\n    pollData.options.forEach(option => colorOrder.push({value: option.value, title: option.title}))\r\n\r\n    colorOrder.sort((a,b) => a.value > b.value ? 1: -1)\r\n\r\n    pollData.options.map((option, index) => {\r\n      const indexValue = colorOrder.findIndex(x => x.title === option.title)\r\n\r\n      option.color = COLOR.RED_GRADIENT[indexValue]\r\n\r\n      if (option.voters.find(voter => voter === userState.user.username)) {\r\n        option.color = COLOR.GREEN\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleModalClose = () => {\r\n    setPollCreation(false);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (pollState.polls.length === 0) {\r\n      fetchAllPolls()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {userState && <NavContainer><ProfileLink to={`/user/${userState.user._id}`} >{userState.user.username}</ProfileLink><Buttons><Button onClick={() => setPollCreation(!pollCreation)}>Suggest A Poll</Button><Button onClick={handleLogout}>Adiós</Button></Buttons></NavContainer>}\r\n      \r\n      <Modal open={pollCreation} onClose={handleModalClose}>\r\n        <SubmitPollForm onSubmit={handleSubmit}>\r\n          <PollHide onClick={() => setPollCreation(!pollCreation)}>Hide</PollHide>\r\n          <PollForm>\r\n            <PollLabel>\r\n              <PollInput onChange={updatePollName} value={pollName} type={'text'} placeholder={'Poll Name'} required />\r\n            </PollLabel>\r\n            <PollOptions id={'option-input'}>\r\n  \r\n              {\r\n                pollOptions.map((options, index) => {\r\n                  return <>\r\n                    <PollLabel>\r\n                      <PollInput onChange={(ev) => updateOptionName(ev, index)} value={pollOptions[index].title} className={`option-${index}`} style={pollOptions.length > 2 ? { borderTopRightRadius: '0', borderBottomRightRadius: '0' } : null} type={'text'} placeholder={'Option'} required />\r\n                      {(pollOptions.length > 2) && <PollRemove type={'button'} className={`option-${index}`} onClick={(ev) => removeOption(ev, index)} >Remove</PollRemove>}\r\n                    </PollLabel>\r\n                    {(index === pollOptions.length - 1 && pollOptions.length < 5) && <Button type={'button'} onClick={(ev) => addOption(ev)} >Add Option</Button>}\r\n                  </>\r\n                })\r\n              }\r\n  \r\n            </PollOptions>\r\n          </PollForm>\r\n          <SubmitPollButton type={\"submit\"}>Submit Poll</SubmitPollButton>\r\n        </SubmitPollForm>\r\n      </Modal>\r\n      \r\n      <PollsContainer>\r\n        {\r\n          pollState.polls.map((poll, index) => {\r\n            let amountOfVotes = 0;\r\n            \r\n            handleColorChange(poll);\r\n\r\n            poll.options.forEach((votes, index) => {\r\n              amountOfVotes += votes.voters.length\r\n              if (hover.index === index && poll.pollName === hover.pollName) {\r\n                poll.options[index] = { ...votes, color: `${COLOR.SAND}`}\r\n              }\r\n            })\r\n\r\n            return <PollContainer key={index} >\r\n              <PollName to={`/poll/${poll._id}`}>{poll.pollName}</PollName>\r\n              <PollDataContainer>\r\n                  {amountOfVotes > 0 ? <PieChart data={poll.options} segmentsStyle={{ cursor: 'pointer' }} style={{ width: '300px', margin: '10px 0', padding: '0px 25px' }} onClick={(ev, index) => handleVote(ev, poll._id, poll.options[index].title)} onMouseOver={(_, index) => {setHover({ pollName: poll.pollName, index })}} onMouseOut={() => setHover({pollName: '', index: -1})} startAngle={270} lineWidth={35} /> : <FirstToVoteContainer><FirstToVoteParagraph>Be the first to vote!</FirstToVoteParagraph></FirstToVoteContainer>}\r\n    \r\n                <PollChoices>\r\n                  {poll.options.map(option => {\r\n                    return <>\r\n                      <PollIndicatorContainer onClick={(ev) => handleVote(ev, poll._id, option.title)} >\r\n                        <PollColorIndicator style={{ background: `${option.color}`}}>{option.voters.length}</PollColorIndicator>\r\n                        {option.title}\r\n                      </PollIndicatorContainer>\r\n                    </>\r\n                  })}\r\n                </PollChoices>\r\n              </PollDataContainer>\r\n            </PollContainer>\r\n          })\r\n        }\r\n      </PollsContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n\r\nconst NavContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nconst ProfileLink = styled(Link)`\r\n  color: ${COLOR.SAND};\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  padding: 5px 10px;\r\n  margin-left: 5px;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.LIGHTROCK};\r\n    border-radius: 5px;\r\n  }\r\n`\r\nconst Buttons = styled.div``\r\nconst Button = styled.button`\r\n  background-color: ${COLOR.ROCK};\r\n  border: 2px solid ${COLOR.WOOD};\r\n  border-radius: 5px;\r\n  padding: 5px 10px;\r\n  margin: 5px;\r\n  color: ${COLOR.SAND};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.SAND};\r\n    border: 2px solid ${COLOR.SAND};\r\n    color: ${COLOR.ROCK};\r\n  }\r\n`\r\nconst SubmitPollForm = styled.form`\r\n  width: 400px;\r\n  height: 400px;\r\n  margin: 100px auto;\r\n  padding: 20px;\r\n  background-color: ${COLOR.ROCK};\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border: none;\r\n  }\r\n`\r\nconst PollForm = styled.div`\r\n  flex: 1;\r\n  margin-top: 10px;\r\n  width: 100%;\r\n`\r\nconst PollHide = styled.p`\r\n  color: ${COLOR.SAND};\r\n  align-self: right;\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.LIGHTROCK};\r\n  }\r\n`\r\nconst PollLabel = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: ${COLOR.LIGHTROCK};\r\n  margin: 10px 0;\r\n  border-radius: 5px;\r\n`\r\nconst PollRemove = styled.button`\r\n  background-color: ${COLOR.SAND};\r\n  border: none;\r\n  border-top-right-radius: 5px;\r\n  border-bottom-right-radius: 5px;\r\n  outline: none;\r\n  color: ${COLOR.LIGHTROCK};\r\n  padding: 5px;\r\n  border: 1px solid ${COLOR.SAND};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.LIGHTROCK};\r\n    color: ${COLOR.SAND};\r\n    border: none;\r\n    border-bottom: 2px solid ${COLOR.SAND};\r\n  }\r\n`\r\nconst SubmitPollButton = styled.button`\r\n  border: 2px solid transparent;\r\n  outline: none;\r\n  background-color: ${COLOR.SAND};\r\n  color: ${COLOR.ROCK};\r\n  font-weight: bold;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.ROCK};\r\n    color: ${COLOR.SAND};\r\n    border-bottom: 2px solid ${COLOR.SAND};\r\n    border-top: 2px solid ${COLOR.SAND};\r\n  }\r\n`\r\nconst InputStyles = css`\r\n  width: 100%;\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  border: none;\r\n  outline: none;\r\n  color: ${COLOR.SAND};\r\n  background-color: ${COLOR.LIGHTROCK};\r\n  border-bottom: 2px solid ${COLOR.SAND};\r\n  font-weight: bold;\r\n\r\n  &:focus {\r\n    border: none;\r\n    border-left: 3px solid ${COLOR.SAND};\r\n    border-bottom: 2px solid transparent;\r\n  }\r\n  &::placeholder {\r\n    color: ${COLOR.SAND};\r\n    font-style: italic;\r\n    font-weight: normal;\r\n  }\r\n`\r\nconst PollInput = styled.input`\r\n  ${InputStyles}\r\n`\r\nconst PollOptions = styled.div`\r\n  width: 100%;\r\n  text-align: center;\r\n`\r\nconst PollsContainer = styled.div`\r\n  margin: 20px 20px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  grid-gap: 20px;\r\n`\r\nconst PollColorIndicator = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  width: 30px;\r\n  height: 30px;\r\n  margin-right: 10px;\r\n  color: black;\r\n`\r\nconst PollIndicatorContainer = styled.li`\r\n  display: flex;\r\n  margin: 10px auto 0 auto;\r\n  transform: translatey(-5px);\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  color: black;\r\n  width: auto;\r\n\r\n  &:hover {\r\n    color: ${COLOR.SAND};\r\n\r\n    ${PollColorIndicator} {\r\n      color: black;\r\n    }\r\n  }\r\n`\r\nconst PollContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  max-width: 525px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  border-radius: 10px;\r\n  background-color: ${COLOR.WOOD};\r\n  text-align: center;\r\n`\r\nconst PollName = styled(Link)`\r\n  margin: 5px;\r\n  width: auto;\r\n  padding: 5px 20px;\r\n  color: black;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  font-size: 1.4em;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.SAND};\r\n    \r\n  }\r\n`\r\nconst PollDataContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  padding-bottom: 10px;\r\n`\r\nconst PollChoices = styled.ul`\r\n  margin: auto 20px auto 0;\r\n`\r\nconst FirstToVoteContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 300px;\r\n  height: 200px;\r\n  margin: 10px 0;\r\n`\r\nconst FirstToVoteParagraph = styled.p`\r\n  font-weight: bold;\r\n`","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\poll-page\\index.jsx",["69","70","71","72"],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\log-in-page\\index.jsx",["73"],"import React, { useState } from \"react\";\r\nimport { SERVER_URL } from '../../constant';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  requestUser,\r\n  receiveUser,\r\n  userError,\r\n} from \"../../reducer/action\";\r\nimport { COLOR } from '../../constant';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nfunction LogIn() {\r\n  const userState = useSelector(state => state.user)\r\n\r\n  const [newUser, setNewUser] = useState(false);\r\n  const [password, setPassword] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const handleUserForm = (ev) => {\r\n    ev.preventDefault();\r\n    setNewUser(!newUser);\r\n    setPassword('');\r\n    setUsername('');\r\n    setConfirmPassword('');\r\n  };\r\n\r\n  const handleLogin = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(requestUser())\r\n\r\n    fetch(SERVER_URL + `/api/getuser/${username}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        password\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.status == 200) {\r\n          dispatch(receiveUser(data.user))\r\n          dispatch(userError(''))\r\n          localStorage.setItem('user', JSON.stringify(data.user))\r\n          history.push('/')\r\n        } else {\r\n          dispatch(userError(data.message))\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message)\r\n        dispatch(userError(err.message))\r\n      })\r\n  }\r\n\r\n  const checkPasswordComplexity = (pwd) => {\r\n    const hasUppercase = /[A-Z]/.test(pwd)\r\n    const hasLowercase = /[a-z]/.test(pwd)\r\n    const hasNumber = /[\\d]/.test(pwd)\r\n    const hasNonAlpha = /[\\W]/.test(pwd)\r\n\r\n    const validity = hasLowercase + hasNonAlpha + hasNumber + hasUppercase\r\n\r\n    return validity >= 4\r\n  }\r\n\r\n  const handleSignup = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    const user = {\r\n      username,\r\n      password,\r\n      votes: [],\r\n    }\r\n\r\n    const passwordComplexity = checkPasswordComplexity(password)\r\n    const passwordCheck = password === confirmPassword\r\n\r\n    if (passwordCheck && passwordComplexity) {\r\n      fetch(SERVER_URL + `/api/createuser`, {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          user\r\n        })\r\n      })\r\n        .then(res => res.json())\r\n        .then(poll => {\r\n          if (poll.status === 201) {\r\n            setMessage('')\r\n            dispatch(receiveUser(poll.user))\r\n            localStorage.setItem('user', JSON.stringify(poll.user))\r\n            history.push('/')\r\n          } else {\r\n            setMessage(poll.message)\r\n          }\r\n        })\r\n        .catch(err => console.log(err.message))\r\n    } else if (passwordCheck && !passwordComplexity) {\r\n      setMessage('Please use a more complex password')\r\n    } else {\r\n      setMessage('Please confirm your password')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <LogInContainer>\r\n      {newUser ? (\r\n        <FormContainer>\r\n          <form onSubmit={handleSignup}>\r\n            <InputContainer>\r\n              <StyledField label={'Username'} onChange={(ev) => setUsername(ev.currentTarget.value)} value={username} variant={'outlined'} required />\r\n              <StyledField label={'Password'} type={'password'} onChange={(ev) => setPassword(ev.currentTarget.value)} value={password} variant={'outlined'} required />\r\n              <StyledField label={'Confirm Password'} type={'password'} onChange={(ev) => setConfirmPassword(ev.currentTarget.value)} value={confirmPassword} variant={'outlined'} required />\r\n            </InputContainer>\r\n            <LogInButton type={\"submit\"}>Sign Up</LogInButton>\r\n          </form>\r\n          <ChangeFormButton type={\"button\"} onClick={handleUserForm}>\r\n            Already a member?\r\n          </ChangeFormButton>\r\n        </FormContainer>\r\n      ) : (\r\n        <FormContainer>\r\n          <form onSubmit={handleLogin}>\r\n            <InputContainer>\r\n              <StyledField onChange={(ev) => setUsername(ev.currentTarget.value)} type={\"text\"} variant={'outlined'} label={'Username'} required />\r\n              <StyledField onChange={(ev) => setPassword(ev.currentTarget.value)} type={\"password\"} variant={'outlined'} label={'Password'} required />\r\n            </InputContainer>\r\n            <LogInButton type={\"submit\"}>Log In</LogInButton>\r\n          </form>\r\n          <ChangeFormButton type={\"button\"} onClick={handleUserForm}>\r\n            First Time Here ?\r\n          </ChangeFormButton>\r\n        </FormContainer>\r\n      )}\r\n      {message && <p>{message}</p>}\r\n      {userState.message && <p>{userState.message}</p>}\r\n    </LogInContainer>\r\n  );\r\n}\r\n\r\nexport default LogIn;\r\n\r\nconst LogInContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  padding-bottom: 100px;\r\n`\r\nconst FormContainer = styled.div`\r\n  width: 350px;\r\n  height: 400px;\r\n  background: ${COLOR.SAND};\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  border-radius: 5px;\r\n`\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`\r\nconst StyledField = withStyles({\r\n  root: {\r\n    marginBottom: '10px',\r\n    '& label.Mui-focused': {\r\n      color: `${COLOR.ROCK}`,\r\n      fontWeight: 'bold',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: `${COLOR.ROCK}`,\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: `${COLOR.ROCK}`,\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: `${COLOR.ROCK}`,\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: `${COLOR.ROCK}`,\r\n      },\r\n    },\r\n  },\r\n})(TextField)\r\nconst LogInButton = styled.button`\r\n  height: 30px;\r\n  width: 100%;\r\n  color: ${COLOR.SAND};\r\n  background: ${COLOR.ROCK};\r\n  border: 1px solid ${COLOR.WOOD};\r\n  border-radius: 5px;\r\n  transition: all 0.1s;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    font-weight: bold;\r\n  }\r\n`\r\nconst ChangeFormButton = styled.button`\r\n  background-color: ${COLOR.SAND};\r\n  border: none;\r\n  color: ${COLOR.ROCK};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\components\\user-page\\index.jsx",["74"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { SERVER_URL } from \"../../constant\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  userLogout,\r\n  receivePolls,\r\n  requestPolls,\r\n  pollError,\r\n} from \"../../reducer/action\";\r\nimport { COLOR } from \"../../constant\";\r\n\r\nfunction User() {\r\n  const userState = useSelector((state) => state.user);\r\n  const pollState = useSelector((state) => state.poll);\r\n\r\n  const [hover, setHover] = useState(-1);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const handleLogout = (ev) => {\r\n    ev.preventDefault();\r\n\r\n    dispatch(userLogout());\r\n\r\n    history.push(\"/\");\r\n\r\n    localStorage.clear();\r\n  };\r\n  const fetchAllPolls = () => {\r\n    dispatch(requestPolls());\r\n\r\n    fetch(SERVER_URL + `/api/getpolls`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        dispatch(receivePolls(data.polls));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(pollError(err.message));\r\n      });\r\n  };\r\n\r\n  const handleNavigateHome = () => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleMouseEnter = (index) => {\r\n    setHover(index);\r\n  };\r\n  const handleMouseLeave = () => {\r\n    setHover(-1);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (pollState.polls.length === 0) {\r\n      fetchAllPolls();\r\n    }\r\n  }, []);\r\nconsole.log(userState.user.votes, pollState.polls, localStorage)\r\n  return (\r\n    <>\r\n      <NavContainer>\r\n        <Buttons>\r\n          <Button onClick={handleNavigateHome}>Go Back Home</Button>\r\n          {userState && <Button onClick={handleLogout}>Adiós</Button>}\r\n        </Buttons>\r\n      </NavContainer>{\" \"}\r\n      {userState.user.votes.length > 0 ? (\r\n        <Links>\r\n          {userState.user.votes.map((userPoll, index) => {\r\n            return (\r\n              <LinkContainer>\r\n                <HoverLink style={hover === index ? { color: `${COLOR.SAND}` } : null}>\r\n                  {\">\"}\r\n                </HoverLink>\r\n                <PollLink\r\n                  to={`/poll/${userPoll}`}\r\n                  onMouseOver={() => handleMouseEnter(index)}\r\n                  onMouseLeave={handleMouseLeave}\r\n                  onFocus={() => handleMouseEnter(index)}\r\n                  onBlur={handleMouseLeave}\r\n                >\r\n                  {pollState.polls.find((poll) => poll._id === userPoll).pollName}\r\n                </PollLink>\r\n              </LinkContainer>\r\n            );\r\n          })}\r\n        </Links>\r\n      ) : (\r\n        <NoVoteYet>you didn't vote yet</NoVoteYet>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default User;\r\n\r\nconst NavContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\nconst Buttons = styled.div``;\r\nconst Button = styled.button`\r\n  background-color: ${COLOR.ROCK};\r\n  border: 2px solid ${COLOR.WOOD};\r\n  border-radius: 5px;\r\n  padding: 5px 10px;\r\n  margin: 5px;\r\n  color: ${COLOR.SAND};\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${COLOR.SAND};\r\n    border: 2px solid ${COLOR.SAND};\r\n    color: ${COLOR.ROCK};\r\n  }\r\n`;\r\nconst Links = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 20px;\r\n`;\r\nconst PollLink = styled(Link)`\r\n  color: black;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  line-height: 30px;\r\n  margin-left: 10px;\r\n`;\r\nconst LinkContainer = styled.div`\r\n  display: flex;\r\n  height: 30px;\r\n`;\r\n\r\nconst NoVoteYet = styled.p``;\r\nconst HoverLink = styled.p`\r\n  color: ${COLOR.ROCK};\r\n  font-weight: bold;\r\n  transition: all 0.2s;\r\n  font-size: 1.2em;\r\n  line-height: 30px;\r\n`;\r\n","C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\constant.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\user-reducer.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\action.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\store.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\index.js",[],"C:\\Users\\alexa\\Documents\\GitHub\\lungor\\src\\reducer\\poll-reducer.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":27},{"ruleId":"79","severity":1,"message":"83","line":6,"column":3,"nodeType":"81","messageId":"82","endLine":6,"endColumn":13},{"ruleId":"79","severity":1,"message":"84","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":21},{"ruleId":"79","severity":1,"message":"85","line":9,"column":36,"nodeType":"81","messageId":"82","endLine":9,"endColumn":45},{"ruleId":"86","severity":1,"message":"87","line":29,"column":6,"nodeType":"88","endLine":29,"endColumn":17,"suggestions":"89"},{"ruleId":"79","severity":1,"message":"85","line":15,"column":3,"nodeType":"81","messageId":"82","endLine":15,"endColumn":12},{"ruleId":"90","severity":1,"message":"91","line":181,"column":42,"nodeType":"92","messageId":"93","endLine":181,"endColumn":44},{"ruleId":"86","severity":1,"message":"94","line":200,"column":6,"nodeType":"88","endLine":200,"endColumn":8,"suggestions":"95"},{"ruleId":"79","severity":1,"message":"85","line":14,"column":3,"nodeType":"81","messageId":"82","endLine":14,"endColumn":12},{"ruleId":"90","severity":1,"message":"91","line":106,"column":42,"nodeType":"92","messageId":"93","endLine":106,"endColumn":44},{"ruleId":"86","severity":1,"message":"94","line":127,"column":6,"nodeType":"88","endLine":127,"endColumn":8,"suggestions":"96"},{"ruleId":"90","severity":1,"message":"97","line":139,"column":45,"nodeType":"92","messageId":"98","endLine":139,"endColumn":47},{"ruleId":"99","severity":1,"message":"100","line":51,"column":25,"nodeType":"101","messageId":"102","endLine":51,"endColumn":27},{"ruleId":"86","severity":1,"message":"94","line":60,"column":6,"nodeType":"88","endLine":60,"endColumn":8,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'requestUser' is defined but never used.","'userError' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["106"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook React.useEffect has missing dependencies: 'fetchAllPolls' and 'pollState.polls.length'. Either include them or remove the dependency array.",["107"],["108"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"112","fix":"114"},{"desc":"112","fix":"115"},"Update the dependencies array to be: [dispatch, userState]",{"range":"116","text":"117"},"Update the dependencies array to be: [fetchAllPolls, pollState.polls.length]",{"range":"118","text":"119"},{"range":"120","text":"119"},{"range":"121","text":"119"},[846,857],"[dispatch, userState]",[4725,4727],"[fetchAllPolls, pollState.polls.length]",[3207,3209],[1404,1406]]